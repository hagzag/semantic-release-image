---
name: Contionuos Integration Flow

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Controls when the workflow will run
on:
  push:
    branches: ["*"]
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Limits concurrency by branch
concurrency:
  group: ${{ github.head_ref || github.ref_name }} 
  cancel-in-progress: true

permissions:
  contents: write   # For code checkout + tagging
  packages: write   # For pushing to GHCR
  actions: write    # If using other actions
  id-token: write   # If using OIDC for cloud provider auth

jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # runs-on: [self-hosted]
    steps:

    - uses: actions/checkout@v3

    - name: display env
      run: |
        env

    - uses: actions/setup-node@v3
      with:
        node-version: 20

    - name: Install semantic releae dependencies
      run: |
        npm install -g semantic-release
        npm install -g @semantic-release/git @semantic-release/github @semantic-release/changelog @semantic-release/commit-analyzer @semantic-release/release-notes-generator @semantic-release/exec

    - name: Set short git commit SHA
      id: vars
      run: |
        calculatedSha=$(git rev-parse --short ${{ github.sha }})
        echo "short_sha=$calculatedSha" >> $GITHUB_OUTPUT

    - name: setup and execute semantic-release
      id: semantic_release_prep
      run: |
        cat <<EOF>> .releaserc.yml
        branches:
        - main
        - name: dev
          prerelease: true
        plugins:
        - "@semantic-release/commit-analyzer"
        - "@semantic-release/release-notes-generator"
        - "@semantic-release/github"
        - - "@semantic-release/exec"
          - verifyReleaseCmd: echo \${nextRelease.version} > nextVersion
        EOF
        semantic-release --dry-run -r ${{ github.server_url }}/${{ github.repository }}.git
        test -f nextVersion && echo "SRTAG=v$(cat nextVersion)" >> ${GITHUB_OUTPUT} || echo "SRTAG=${{ steps.vars.outputs.short_sha }}" >> ${GITHUB_OUTPUT}
        # echo $SRTAG
        # cat nextVersion
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Setup Docker buildx
      uses: docker/setup-buildx-action@v2

    # Login against a Docker registry except on PR
    # https://github.com/docker/login-action
    - name: Log into registry ${{ env.REGISTRY }}
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GH_TOKEN }}

    # add image caching 
    - uses: satackey/action-docker-layer-caching@v0.0.11
      # Ignore the failure of a step and avoid terminating the job.
      continue-on-error: true
      with:
        key: foo-docker-cache-{hash}
        restore-keys: |
          foo-docker-cache-

    # Extract metadata (tags, labels) for Docker
    # https://github.com/docker/metadata-action
    - name: Extract Docker metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          # set latest tag for master branch
          type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'main') }}
          type=raw,value=latest-${{ github.ref_name }}
          type=raw,value=${{ steps.semantic_release_prep.outputs.SRTAG }}
          
    # For meta verification
    - name: List Docker tag
      run: echo "${{ steps.meta.outputs.tags }}"

    # Build and push Docker image with Buildx (don't push on PR's)
    # https://github.com/docker/build-push-action
    - name: Build and push Docker image
      id: build_n_push
      uses: docker/build-push-action@v4
      with:
        context: ./
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64

    - name: setup and execute semantic-release
      id: semantic_release
      run: |
        semantic-release -r ${{ github.server_url }}/${{ github.repository }}.git
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
      if: steps.build_n_push.outputs.exit_code == 0
